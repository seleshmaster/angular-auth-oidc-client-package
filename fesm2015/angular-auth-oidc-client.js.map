{"version":3,"file":"angular-auth-oidc-client.js.map","sources":["ng://angular-auth-oidc-client/lib/models/auth.well-known-endpoints.ts","ng://angular-auth-oidc-client/lib/models/authorization-result.ts","ng://angular-auth-oidc-client/lib/models/authorization-state.enum.ts","ng://angular-auth-oidc-client/lib/models/jwtkeys.ts","ng://angular-auth-oidc-client/lib/models/validation-result.enum.ts","ng://angular-auth-oidc-client/lib/models/validate-state-result.model.ts","ng://angular-auth-oidc-client/lib/modules/auth.configuration.ts","ng://angular-auth-oidc-client/lib/data-services/oidc-data.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.logger.service.ts","ng://angular-auth-oidc-client/lib/services/existing-iframe.service.ts","ng://angular-auth-oidc-client/lib/services/oidc-equality-helper.service.ts","ng://angular-auth-oidc-client/lib/services/oidc-token-helper.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.storage.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.common.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.validation.ts","ng://angular-auth-oidc-client/lib/services/oidc-security-state-validation.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.check-session.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.config.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.silent-renew.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.user-service.ts","ng://angular-auth-oidc-client/lib/services/uri-encoder.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.service.ts","ng://angular-auth-oidc-client/lib/modules/auth.module.ts"],"sourcesContent":["export class AuthWellKnownEndpoints {\r\n    issuer = '';\r\n    jwks_uri = '';\r\n    authorization_endpoint = '';\r\n    token_endpoint = '';\r\n    userinfo_endpoint = '';\r\n    end_session_endpoint = '';\r\n    check_session_iframe = '';\r\n    revocation_endpoint = '';\r\n    introspection_endpoint = '';\r\n\r\n    public setWellKnownEndpoints(data: any) {\r\n        this.issuer = data.issuer;\r\n        this.jwks_uri = data.jwks_uri;\r\n        this.authorization_endpoint = data.authorization_endpoint;\r\n        this.token_endpoint = data.token_endpoint;\r\n        this.userinfo_endpoint = data.userinfo_endpoint;\r\n\r\n        if (data.end_session_endpoint) {\r\n            this.end_session_endpoint = data.end_session_endpoint;\r\n        }\r\n\r\n        if (data.check_session_iframe) {\r\n            this.check_session_iframe = data.check_session_iframe;\r\n        }\r\n\r\n        if (data.revocation_endpoint) {\r\n            this.revocation_endpoint = data.revocation_endpoint;\r\n        }\r\n\r\n        if (data.introspection_endpoint) {\r\n            this.introspection_endpoint = data.introspection_endpoint;\r\n        }\r\n    }\r\n}\r\n","import { AuthorizationState } from './authorization-state.enum';\r\nimport { ValidationResult } from './validation-result.enum';\r\n\r\nexport class AuthorizationResult {\r\n    constructor(\r\n        public authorizationState: AuthorizationState,\r\n        public validationResult: ValidationResult\r\n    ) {}\r\n}\r\n","export enum AuthorizationState {\r\n    authorized = 'authorized',\r\n    forbidden = 'forbidden',\r\n    unauthorized = 'unauthorized'\r\n}\r\n","export class JwtKeys {\r\n    keys: JwtKey[] = [];\r\n}\r\n\r\nexport class JwtKey {\r\n    kty = '';\r\n    use = '';\r\n    kid = '';\r\n    x5t = '';\r\n    e = '';\r\n    n = '';\r\n    x5c: any[] = [];\r\n}\r\n","export enum ValidationResult {\r\n    NotSet = 'NotSet',\r\n    StatesDoNotMatch = 'StatesDoNotMatch',\r\n    SignatureFailed = 'SignatureFailed',\r\n    IncorrectNonce = 'IncorrectNonce',\r\n    RequiredPropertyMissing = 'RequiredPropertyMissing',\r\n    MaxOffsetExpired = 'MaxOffsetExpired',\r\n    IssDoesNotMatchIssuer = 'IssDoesNotMatchIssuer',\r\n    NoAuthWellKnownEndPoints = 'NoAuthWellKnownEndPoints',\r\n    IncorrectAud = 'IncorrectAud',\r\n    TokenExpired = 'TokenExpired',\r\n    IncorrectAtHash = 'IncorrectAtHash',\r\n    Ok = 'Ok',\r\n    LoginRequired = 'LoginRequired',\r\n    SecureTokenServerError = 'SecureTokenServerError'\r\n}\r\n","import { ValidationResult } from './validation-result.enum';\r\n\r\nexport class ValidateStateResult {\r\n    constructor(\r\n        public access_token = '',\r\n        public id_token = '',\r\n        public authResponseIsValid = false,\r\n        public decoded_id_token: any = {},\r\n        public state: ValidationResult = ValidationResult.NotSet\r\n    ) {}\r\n}\r\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nexport class OpenIDImplicitFlowConfiguration {\r\n    stsServer = 'https://localhost:44318';\r\n    redirect_url = 'https://localhost:44311';\r\n    // The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n    // by the iss (issuer) Claim as an audience.\r\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\r\n    // or if it contains additional audiences not trusted by the Client.\r\n    client_id = 'angularclient';\r\n    response_type = 'id_token token';\r\n    scope = 'openid email profile';\r\n    // Only for Google Auth with particular G Suite domain, see https://developers.google.com/identity/protocols/OpenIDConnect#hd-param\r\n    hd_param = '';\r\n    post_logout_redirect_uri = 'https://localhost:44311/unauthorized';\r\n    start_checksession = false;\r\n    silent_renew = false;\r\n    silent_renew_url = 'https://localhost:44311';\r\n    silent_renew_offset_in_seconds = 0;\r\n    silent_redirect_url = 'https://localhost:44311';\r\n    post_login_route = '/';\r\n    // HTTP 403\r\n    forbidden_route = '/forbidden';\r\n    // HTTP 401\r\n    unauthorized_route = '/unauthorized';\r\n    auto_userinfo = true;\r\n    auto_clean_state_after_authentication = true;\r\n    trigger_authorization_result_event = false;\r\n    log_console_warning_active = true;\r\n    log_console_debug_active = false;\r\n    iss_validation_off = false;\r\n    history_cleanup_off = false;\r\n\r\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n    max_id_token_iat_offset_allowed_in_seconds = 3;\r\n    disable_iat_offset_validation = false;\r\n\r\n    storage = typeof Storage !== 'undefined' ? sessionStorage : null;\r\n}\r\n\r\n@Injectable()\r\nexport class AuthConfiguration {\r\n    private openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration | undefined;\r\n    private defaultConfig: OpenIDImplicitFlowConfiguration;\r\n\r\n    get stsServer(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.stsServer;\r\n        }\r\n\r\n        return this.defaultConfig.stsServer;\r\n    }\r\n\r\n    get redirect_url(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.redirect_url;\r\n        }\r\n\r\n        return this.defaultConfig.redirect_url;\r\n    }\r\n\r\n    get silent_redirect_url(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.silent_renew_url;\r\n        }\r\n\r\n        return this.defaultConfig.silent_renew_url;\r\n    }\r\n\r\n    get client_id(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.client_id;\r\n        }\r\n\r\n        return this.defaultConfig.client_id;\r\n    }\r\n\r\n    get response_type(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.response_type;\r\n        }\r\n\r\n        return this.defaultConfig.response_type;\r\n    }\r\n\r\n    get scope(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.scope;\r\n        }\r\n\r\n        return this.defaultConfig.scope;\r\n    }\r\n\r\n    get hd_param(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.hd_param;\r\n        }\r\n\r\n        return this.defaultConfig.hd_param;\r\n    }\r\n\r\n    get post_logout_redirect_uri(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.post_logout_redirect_uri;\r\n        }\r\n\r\n        return this.defaultConfig.post_logout_redirect_uri;\r\n    }\r\n\r\n    get start_checksession(): boolean {\r\n        if (!isPlatformBrowser(this.platformId)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.start_checksession;\r\n        }\r\n\r\n        return this.defaultConfig.start_checksession;\r\n    }\r\n\r\n    get silent_renew(): boolean {\r\n        if (!isPlatformBrowser(this.platformId)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.silent_renew;\r\n        }\r\n\r\n        return this.defaultConfig.silent_renew;\r\n    }\r\n\r\n    get silent_renew_offset_in_seconds(): number {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.silent_renew_offset_in_seconds;\r\n        }\r\n\r\n        return this.defaultConfig.silent_renew_offset_in_seconds;\r\n    }\r\n\r\n    get post_login_route(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.post_login_route;\r\n        }\r\n\r\n        return this.defaultConfig.post_login_route;\r\n    }\r\n\r\n    get forbidden_route(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.forbidden_route;\r\n        }\r\n\r\n        return this.defaultConfig.forbidden_route;\r\n    }\r\n\r\n    get unauthorized_route(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.unauthorized_route;\r\n        }\r\n\r\n        return this.defaultConfig.unauthorized_route;\r\n    }\r\n\r\n    get auto_userinfo(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.auto_userinfo;\r\n        }\r\n\r\n        return this.defaultConfig.auto_userinfo;\r\n    }\r\n\r\n    get auto_clean_state_after_authentication(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.auto_clean_state_after_authentication;\r\n        }\r\n\r\n        return this.defaultConfig.auto_clean_state_after_authentication;\r\n    }\r\n\r\n    get trigger_authorization_result_event(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.trigger_authorization_result_event;\r\n        }\r\n\r\n        return this.defaultConfig.trigger_authorization_result_event;\r\n    }\r\n\r\n    get isLogLevelWarningEnabled(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.log_console_warning_active;\r\n        }\r\n\r\n        return this.defaultConfig.log_console_warning_active;\r\n    }\r\n\r\n    get isLogLevelDebugEnabled(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.log_console_debug_active;\r\n        }\r\n\r\n        return this.defaultConfig.log_console_debug_active;\r\n    }\r\n\r\n    get iss_validation_off(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.iss_validation_off;\r\n        }\r\n\r\n        return this.defaultConfig.iss_validation_off;\r\n    }\r\n\r\n    get history_cleanup_off(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.history_cleanup_off;\r\n        }\r\n\r\n        return this.defaultConfig.history_cleanup_off;\r\n    }\r\n\r\n    get max_id_token_iat_offset_allowed_in_seconds(): number {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.max_id_token_iat_offset_allowed_in_seconds;\r\n        }\r\n\r\n        return this.defaultConfig.max_id_token_iat_offset_allowed_in_seconds;\r\n    }\r\n\r\n    get disable_iat_offset_validation(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.disable_iat_offset_validation;\r\n        }\r\n\r\n        return this.defaultConfig.disable_iat_offset_validation;\r\n    }\r\n\r\n    get storage(): any {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.storage;\r\n        }\r\n\r\n        return this.defaultConfig.storage;\r\n    }\r\n\r\n    constructor(@Inject(PLATFORM_ID) private platformId: Object) {\r\n        this.defaultConfig = new OpenIDImplicitFlowConfiguration();\r\n    }\r\n\r\n    init(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration) {\r\n        this.openIDImplicitFlowConfiguration = openIDImplicitFlowConfiguration;\r\n        this._onConfigurationChange.next(openIDImplicitFlowConfiguration);\r\n    }\r\n\r\n    private _onConfigurationChange = new Subject<OpenIDImplicitFlowConfiguration>();\r\n    get onConfigurationChange(): Observable<OpenIDImplicitFlowConfiguration> {\r\n        return this._onConfigurationChange.asObservable();\r\n    }\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class OidcDataService {\r\n    constructor(private httpClient: HttpClient) {}\r\n\r\n    getWellknownEndpoints<T>(url: string): Observable<T> {\r\n        let headers = new HttpHeaders();\r\n        headers = headers.set('Accept', 'application/json');\r\n\r\n        return this.httpClient.get<T>(url, {\r\n            headers: headers,\r\n        });\r\n    }\r\n\r\n    getIdentityUserData<T>(url: string, token: string): Observable<T> {\r\n        let headers = new HttpHeaders();\r\n        headers = headers.set('Accept', 'application/json');\r\n        headers = headers.set('Authorization', 'Bearer ' + decodeURIComponent(token));\r\n\r\n        return this.httpClient.get<T>(url, {\r\n            headers: headers,\r\n        });\r\n    }\r\n\r\n    get<T>(url: string): Observable<T> {\r\n        let headers = new HttpHeaders();\r\n        headers = headers.set('Accept', 'application/json');\r\n\r\n        return this.httpClient.get<T>(url, {\r\n            headers: headers,\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\n\r\n@Injectable()\r\nexport class LoggerService {\r\n    constructor(private authConfiguration: AuthConfiguration) {}\r\n\r\n    logError(message: any) {\r\n        console.error(message);\r\n    }\r\n\r\n    logWarning(message: any) {\r\n        if (this.authConfiguration.isLogLevelWarningEnabled) {\r\n            console.warn(message);\r\n        }\r\n    }\r\n\r\n    logDebug(message: any) {\r\n        if (this.authConfiguration.isLogLevelDebugEnabled) {\r\n            console.log(message);\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n@Injectable()\r\nexport class IFrameService {\r\n    constructor(private loggerService: LoggerService) {}\r\n\r\n    getExistingIFrame(identifier: string) {\r\n        const iFrameOnParent = this.getIFrameFromParentWindow(identifier);\r\n\r\n        if (iFrameOnParent) {\r\n            return iFrameOnParent;\r\n        }\r\n\r\n        return this.getIFrameFromWindow(identifier);\r\n    }\r\n\r\n    addIFrameToWindowBody(identifier: string) {\r\n        const sessionIframe = window.document.createElement('iframe');\r\n        sessionIframe.id = identifier;\r\n        this.loggerService.logDebug(sessionIframe);\r\n        sessionIframe.style.display = 'none';\r\n        window.document.body.appendChild(sessionIframe);\r\n        return sessionIframe;\r\n    }\r\n\r\n    private getIFrameFromParentWindow(identifier: string) {\r\n        return window.parent.document.getElementById(identifier);\r\n    }\r\n\r\n    private getIFrameFromWindow(identifier: string) {\r\n        return window.document.getElementById(identifier);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class EqualityHelperService {\r\n    areEqual(value1: string | any[] | object | null | undefined, value2: string | any[] | object | null | undefined) {\r\n        if (!value1 || !value2) {\r\n            return false;\r\n        }\r\n\r\n        if (this.bothValuesAreArrays(value1, value2)) {\r\n            return this.arraysEqual(value1 as any[], value2 as any[]);\r\n        }\r\n\r\n        if (this.bothValuesAreStrings(value1, value2)) {\r\n            return value1 === value2;\r\n        }\r\n\r\n        if (this.bothValuesAreObjects(value1, value2)) {\r\n            return JSON.stringify(value1).toLowerCase() === JSON.stringify(value2).toLowerCase();\r\n        }\r\n\r\n        if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\r\n            if (Array.isArray(value1) && this.valueIsString(value2)) {\r\n                return value1[0] === value2;\r\n            }\r\n            if (Array.isArray(value2) && this.valueIsString(value1)) {\r\n                return value2[0] === value1;\r\n            }\r\n        }\r\n    }\r\n\r\n    private oneValueIsStringAndTheOtherIsArray(value1: string | object | any[], value2: string | object | any[]) {\r\n        return (Array.isArray(value1) && this.valueIsString(value2)) || (Array.isArray(value2) && this.valueIsString(value1));\r\n    }\r\n\r\n    private bothValuesAreObjects(value1: string | object | any[], value2: string | object | any[]) {\r\n        return this.valueIsObject(value1) && this.valueIsObject(value2);\r\n    }\r\n\r\n    private bothValuesAreStrings(value1: string | object | any[], value2: string | object | any[]) {\r\n        return this.valueIsString(value1) && this.valueIsString(value2);\r\n    }\r\n\r\n    private bothValuesAreArrays(value1: string | object | any[], value2: string | object | any[]) {\r\n        return Array.isArray(value1) && Array.isArray(value2);\r\n    }\r\n\r\n    private valueIsString(value: any) {\r\n        return typeof value === 'string' || value instanceof String;\r\n    }\r\n\r\n    private valueIsObject(value: any) {\r\n        return typeof value === 'object';\r\n    }\r\n\r\n    private arraysEqual(arr1: Array<string>, arr2: Array<string>) {\r\n        if (arr1.length !== arr2.length) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = arr1.length; i--; ) {\r\n            if (arr1[i] !== arr2[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n@Injectable()\r\nexport class TokenHelperService {\r\n    private PARTS_OF_TOKEN = 3;\r\n    constructor(private readonly loggerService: LoggerService) {}\r\n\r\n    getTokenExpirationDate(dataIdToken: any): Date {\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            return new Date();\r\n        }\r\n\r\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        date.setUTCSeconds(dataIdToken.exp);\r\n\r\n        return date;\r\n    }\r\n\r\n    getHeaderFromToken(token: any, encoded: boolean) {\r\n        if (!this.tokenIsValid(token)) {\r\n            return {};\r\n        }\r\n\r\n        return this.getPartOfToken(token, 0, encoded);\r\n    }\r\n\r\n    getPayloadFromToken(token: any, encoded: boolean) {\r\n        if (!this.tokenIsValid(token)) {\r\n            return {};\r\n        }\r\n\r\n        return this.getPartOfToken(token, 1, encoded);\r\n    }\r\n\r\n    getSignatureFromToken(token: any, encoded: boolean) {\r\n        if (!this.tokenIsValid(token)) {\r\n            return {};\r\n        }\r\n\r\n        return this.getPartOfToken(token, 2, encoded);\r\n    }\r\n\r\n    private getPartOfToken(token: string, index: number, encoded: boolean) {\r\n        const partOfToken = this.extractPartOfToken(token, index);\r\n\r\n        if (encoded) {\r\n            return partOfToken;\r\n        }\r\n\r\n        const result = this.urlBase64Decode(partOfToken);\r\n        return JSON.parse(result);\r\n    }\r\n\r\n    private urlBase64Decode(str: string) {\r\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\r\n        switch (output.length % 4) {\r\n            case 0:\r\n                break;\r\n            case 2:\r\n                output += '==';\r\n                break;\r\n            case 3:\r\n                output += '=';\r\n                break;\r\n            default:\r\n                throw Error('Illegal base64url string!');\r\n        }\r\n\r\n        const decoded = typeof window !== 'undefined' ? window.atob(output) : new Buffer(output, 'base64').toString('binary');\r\n\r\n        try {\r\n            // Going backwards: from bytestream, to percent-encoding, to original string.\r\n            return decodeURIComponent(decoded.split('')\r\n                .map((c: string) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n                .join(''));\r\n        } catch (err) {\r\n            return decoded;\r\n        }\r\n    }\r\n\r\n    private tokenIsValid(token: string) {\r\n        if (!token) {\r\n            this.loggerService.logError(`token '${token}' is not valid --> token falsy`);\r\n            return false;\r\n        }\r\n\r\n        if (!(token as string).includes('.')) {\r\n            this.loggerService.logError(`token '${token}' is not valid --> no dots included`);\r\n            return false;\r\n        }\r\n\r\n        const parts = token.split('.');\r\n\r\n        if (parts.length !== this.PARTS_OF_TOKEN) {\r\n            this.loggerService.logError(`token '${token}' is not valid --> token has t have exact three dots`);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private extractPartOfToken(token: string, index: number) {\r\n        return token.split('.')[index];\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\n\r\n/**\r\n * Implement this class-interface to create a custom storage.\r\n */\r\n@Injectable()\r\nexport abstract class OidcSecurityStorage {\r\n    /**\r\n     * This method must contain the logic to read the storage.\r\n     * @param key\r\n     * @return The value of the given key\r\n     */\r\n    public abstract read(key: string): any;\r\n\r\n    /**\r\n     * This method must contain the logic to write the storage.\r\n     * @param key\r\n     * @param value The value for the given key\r\n     */\r\n    public abstract write(key: string, value: any): void;\r\n}\r\n\r\n@Injectable()\r\nexport class BrowserStorage implements OidcSecurityStorage {\r\n    private hasStorage: boolean;\r\n\r\n    constructor(private authConfiguration: AuthConfiguration) {\r\n        this.hasStorage = typeof Storage !== 'undefined';\r\n    }\r\n\r\n    public read(key: string): any {\r\n        if (this.hasStorage) {\r\n            return JSON.parse(this.authConfiguration.storage.getItem(key + '_' + this.authConfiguration.client_id));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    public write(key: string, value: any): void {\r\n        if (this.hasStorage) {\r\n            value = value === undefined ? null : value;\r\n            this.authConfiguration.storage.setItem(key + '_' + this.authConfiguration.client_id, JSON.stringify(value));\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { OidcSecurityStorage } from './oidc.security.storage';\r\n\r\nexport type SilentRenewState = 'running' | '';\r\n\r\n@Injectable()\r\nexport class OidcSecurityCommon {\r\n    private storage_auth_result = 'authorizationResult';\r\n\r\n    public get authResult(): any {\r\n        return this.retrieve(this.storage_auth_result);\r\n    }\r\n\r\n    public set authResult(value: any) {\r\n        this.store(this.storage_auth_result, value);\r\n    }\r\n\r\n    private storage_access_token = 'authorizationData';\r\n\r\n    public get accessToken(): string {\r\n        return this.retrieve(this.storage_access_token) || '';\r\n    }\r\n\r\n    public set accessToken(value: string) {\r\n        this.store(this.storage_access_token, value);\r\n    }\r\n\r\n    private storage_id_token = 'authorizationDataIdToken';\r\n\r\n    public get idToken(): string {\r\n        return this.retrieve(this.storage_id_token) || '';\r\n    }\r\n\r\n    public set idToken(value: string) {\r\n        this.store(this.storage_id_token, value);\r\n    }\r\n\r\n    private storage_is_authorized = '_isAuthorized';\r\n\r\n    public get isAuthorized(): boolean | undefined {\r\n        return this.retrieve(this.storage_is_authorized);\r\n    }\r\n\r\n    public set isAuthorized(value: boolean | undefined) {\r\n        this.store(this.storage_is_authorized, value);\r\n    }\r\n\r\n    private storage_user_data = 'userData';\r\n\r\n    public get userData(): any {\r\n        return this.retrieve(this.storage_user_data);\r\n    }\r\n\r\n    public set userData(value: any) {\r\n        this.store(this.storage_user_data, value);\r\n    }\r\n\r\n    private storage_auth_nonce = 'authNonce';\r\n\r\n    public get authNonce(): string {\r\n        return this.retrieve(this.storage_auth_nonce) || '';\r\n    }\r\n\r\n    public set authNonce(value: string) {\r\n        this.store(this.storage_auth_nonce, value);\r\n    }\r\n\r\n    private storage_code_verifier = 'code_verifier';\r\n\r\n    public get code_verifier(): string {\r\n        return this.retrieve(this.storage_code_verifier) || '';\r\n    }\r\n\r\n    public set code_verifier(value: string) {\r\n        this.store(this.storage_code_verifier, value);\r\n    }\r\n\r\n    private storage_auth_state_control = 'authStateControl';\r\n\r\n    public get authStateControl(): string {\r\n        return this.retrieve(this.storage_auth_state_control) || '';\r\n    }\r\n\r\n    public set authStateControl(value: string) {\r\n        this.store(this.storage_auth_state_control, value);\r\n    }\r\n\r\n    private storage_session_state = 'session_state';\r\n\r\n    public get sessionState(): any {\r\n        return this.retrieve(this.storage_session_state);\r\n    }\r\n\r\n    public set sessionState(value: any) {\r\n        this.store(this.storage_session_state, value);\r\n    }\r\n\r\n    private storage_silent_renew_running = 'storage_silent_renew_running';\r\n\r\n    public get silentRenewRunning(): SilentRenewState {\r\n        return this.retrieve(this.storage_silent_renew_running) || '';\r\n    }\r\n\r\n    public set silentRenewRunning(value: SilentRenewState) {\r\n        this.store(this.storage_silent_renew_running, value);\r\n    }\r\n\r\n    private storage_custom_request_params = 'storage_custom_request_params';\r\n\r\n    public get customRequestParams(): {\r\n        [key: string]: string | number | boolean;\r\n    } {\r\n        return this.retrieve(this.storage_custom_request_params);\r\n    }\r\n\r\n    public set customRequestParams(value: { [key: string]: string | number | boolean }) {\r\n        this.store(this.storage_custom_request_params, value);\r\n    }\r\n\r\n    constructor(private oidcSecurityStorage: OidcSecurityStorage) {}\r\n\r\n    private retrieve(key: string): any {\r\n        return this.oidcSecurityStorage.read(key);\r\n    }\r\n\r\n    private store(key: string, value: any) {\r\n        this.oidcSecurityStorage.write(key, value);\r\n    }\r\n\r\n    resetStorageData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            this.store(this.storage_auth_result, '');\r\n            this.store(this.storage_session_state, '');\r\n            this.store(this.storage_silent_renew_running, '');\r\n            this.store(this.storage_is_authorized, false);\r\n            this.store(this.storage_access_token, '');\r\n            this.store(this.storage_id_token, '');\r\n            this.store(this.storage_user_data, '');\r\n            this.store(this.storage_code_verifier, '');\r\n        }\r\n    }\r\n\r\n    getAccessToken(): any {\r\n        return this.retrieve(this.storage_access_token);\r\n    }\r\n\r\n    getIdToken(): any {\r\n        return this.retrieve(this.storage_id_token);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { hextob64u, KEYUTIL, KJUR } from 'jsrsasign';\r\nimport { EqualityHelperService } from './oidc-equality-helper.service';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n// http://openid.net/specs/openid-connect-implicit-1_0.html\r\n\r\n// id_token\r\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n// MUST exactly match the value of the iss (issuer) Claim.\r\n//\r\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\r\n// or if it contains additional audiences not trusted by the Client.\r\n//\r\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\r\n//\r\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\r\n//\r\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\r\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n//\r\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect Core 1.0\r\n// [OpenID.Core] specification.\r\n//\r\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\r\n// for clock skew).\r\n//\r\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n//\r\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\r\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\r\n// is Client specific.\r\n//\r\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\r\n// The meaning and processing of acr Claim Values is out of scope for this document.\r\n//\r\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\r\n// if it determines too much time has elapsed since the last End- User authentication.\r\n\r\n// Access Token Validation\r\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present in the ID Token.\r\n\r\n@Injectable()\r\nexport class OidcSecurityValidation {\r\n    constructor(\r\n        private arrayHelperService: EqualityHelperService,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService\r\n    ) {}\r\n\r\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\r\n    isTokenExpired(token: string, offsetSeconds?: number): boolean {\r\n        let decoded: any;\r\n        decoded = this.tokenHelperService.getPayloadFromToken(token, false);\r\n\r\n        return !this.validate_id_token_exp_not_expired(decoded, offsetSeconds);\r\n    }\r\n\r\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\r\n    validate_id_token_exp_not_expired(decoded_id_token: string, offsetSeconds?: number): boolean {\r\n        const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(decoded_id_token);\r\n        offsetSeconds = offsetSeconds || 0;\r\n\r\n        if (!tokenExpirationDate) {\r\n            return false;\r\n        }\r\n\r\n        const tokenExpirationValue = tokenExpirationDate.valueOf();\r\n        const nowWithOffset = new Date().valueOf() + offsetSeconds * 1000;\r\n        const tokenNotExpired = tokenExpirationValue > nowWithOffset;\r\n\r\n        this.loggerService.logDebug(`Token not expired?: ${tokenExpirationValue} > ${nowWithOffset}  (${tokenNotExpired})`);\r\n\r\n        // Token not expired?\r\n        return tokenNotExpired;\r\n    }\r\n\r\n    // iss\r\n    // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the https scheme that contains scheme, host,\r\n    // and optionally, port number and path components and no query or fragment components.\r\n    //\r\n    // sub\r\n    // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\r\n    // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\r\n    // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\r\n    //\r\n    // aud\r\n    // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an audience value.\r\n    // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\r\n    // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\r\n    //\r\n    // exp\r\n    // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\r\n    // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\r\n    // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\r\n    // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until the date/ time.\r\n    // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\r\n    //\r\n    // iat\r\n    // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured\r\n    // in UTC until the date/ time.\r\n    validate_required_id_token(dataIdToken: any): boolean {\r\n        let validated = true;\r\n        if (!dataIdToken.hasOwnProperty('iss')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('iss is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('sub')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('sub is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('aud')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('aud is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('exp is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('iat is missing, this is required in the id_token');\r\n        }\r\n\r\n        return validated;\r\n    }\r\n\r\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n    validate_id_token_iat_max_offset(dataIdToken: any,\r\n        max_offset_allowed_in_seconds: number,\r\n        disable_iat_offset_validation: boolean): boolean {\r\n\r\n        if (disable_iat_offset_validation) {\r\n            return true;\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            return false;\r\n        }\r\n\r\n        const dateTime_iat_id_token = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        dateTime_iat_id_token.setUTCSeconds(dataIdToken.iat);\r\n\r\n        max_offset_allowed_in_seconds = max_offset_allowed_in_seconds || 0;\r\n\r\n        if (dateTime_iat_id_token == null) {\r\n            return false;\r\n        }\r\n\r\n        this.loggerService.logDebug(\r\n            'validate_id_token_iat_max_offset: ' +\r\n                (new Date().valueOf() - dateTime_iat_id_token.valueOf()) +\r\n                ' < ' +\r\n                max_offset_allowed_in_seconds * 1000\r\n        );\r\n        return new Date().valueOf() - dateTime_iat_id_token.valueOf() < max_offset_allowed_in_seconds * 1000;\r\n    }\r\n\r\n    // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\r\n    // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\r\n    // The precise method for detecting replay attacks is Client specific.\r\n    validate_id_token_nonce(dataIdToken: any, local_nonce: any): boolean {\r\n        if (dataIdToken.nonce !== local_nonce) {\r\n            this.loggerService.logDebug('Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + local_nonce);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n    // MUST exactly match the value of the iss (issuer) Claim.\r\n    validate_id_token_iss(dataIdToken: any, authWellKnownEndpoints_issuer: any): boolean {\r\n        if ((dataIdToken.iss as string) !== (authWellKnownEndpoints_issuer as string)) {\r\n            this.loggerService.logDebug(\r\n                'Validate_id_token_iss failed, dataIdToken.iss: ' +\r\n                    dataIdToken.iss +\r\n                    ' authWellKnownEndpoints issuer:' +\r\n                    authWellKnownEndpoints_issuer\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n    // by the iss (issuer) Claim as an audience.\r\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\r\n    // not trusted by the Client.\r\n    validate_id_token_aud(dataIdToken: any, aud: any): boolean {\r\n        if (dataIdToken.aud instanceof Array) {\r\n            const result = this.arrayHelperService.areEqual(dataIdToken.aud, aud);\r\n\r\n            if (!result) {\r\n                this.loggerService.logDebug('Validate_id_token_aud  array failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        } else if (dataIdToken.aud !== aud) {\r\n            this.loggerService.logDebug('Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    validateStateFromHashCallback(state: any, local_state: any): boolean {\r\n        if ((state as string) !== (local_state as string)) {\r\n            this.loggerService.logDebug('ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + local_state);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    validate_userdata_sub_id_token(id_token_sub: any, userdata_sub: any): boolean {\r\n        if ((id_token_sub as string) !== (userdata_sub as string)) {\r\n            this.loggerService.logDebug('validate_userdata_sub_id_token failed, id_token_sub: ' + id_token_sub + ' userdata_sub:' + userdata_sub);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\r\n    // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n    // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\r\n    // OpenID Connect Core 1.0 [OpenID.Core] specification.\r\n    validate_signature_id_token(id_token: any, jwtkeys: any): boolean {\r\n        if (!jwtkeys || !jwtkeys.keys) {\r\n            return false;\r\n        }\r\n\r\n        const header_data = this.tokenHelperService.getHeaderFromToken(id_token, false);\r\n\r\n        if (Object.keys(header_data).length === 0 && header_data.constructor === Object) {\r\n            this.loggerService.logWarning('id token has no header data');\r\n            return false;\r\n        }\r\n\r\n        const kid = header_data.kid;\r\n        const alg = header_data.alg;\r\n\r\n        if ('RS256' !== (alg as string)) {\r\n            this.loggerService.logWarning('Only RS256 supported');\r\n            return false;\r\n        }\r\n\r\n        let isValid = false;\r\n\r\n        if (!header_data.hasOwnProperty('kid')) {\r\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\r\n            // kty\t\"RSA\" use \"sig\"\r\n            let amountOfMatchingKeys = 0;\r\n            for (const key of jwtkeys.keys) {\r\n                if ((key.kty as string) === 'RSA' ) {\r\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\r\n                }\r\n            }\r\n\r\n            if (amountOfMatchingKeys === 0) {\r\n                this.loggerService.logWarning('no keys found, incorrect Signature, validation failed for id_token');\r\n                return false;\r\n            } else if (amountOfMatchingKeys > 1) {\r\n                this.loggerService.logWarning('no ID Token kid claim in JOSE header and multiple supplied in jwks_uri');\r\n                return false;\r\n            } else {\r\n                for (const key of jwtkeys.keys) {\r\n                    if ((key.kty as string) === 'RSA' ) {\r\n                        const publickey = KEYUTIL.getKey(key);\r\n                        isValid = KJUR.jws.JWS.verify(id_token, publickey, ['RS256']);\r\n                        if (!isValid) {\r\n                            this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\r\n                        }\r\n                        return isValid;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // kid in the Jose header of id_token\r\n            for (const key of jwtkeys.keys) {\r\n                if ((key.kid as string) === (kid as string)) {\r\n                    const publickey = KEYUTIL.getKey(key);\r\n                    isValid = KJUR.jws.JWS.verify(id_token, publickey, ['RS256']);\r\n                    if (!isValid) {\r\n                        this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\r\n                    }\r\n                    return isValid;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    config_validate_response_type(response_type: string): boolean {\r\n        if (response_type === 'id_token token' || response_type === 'id_token') {\r\n            return true;\r\n        }\r\n\r\n        if (response_type === 'code') {\r\n            return true;\r\n        }\r\n\r\n        this.loggerService.logWarning('module configure incorrect, invalid response_type:' + response_type);\r\n        return false;\r\n    }\r\n\r\n    // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\r\n    //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\r\n    ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\r\n    ////    if (!header_data.hasOwnProperty('kid')) {\r\n    ////        // no kid defined in Jose header\r\n    ////        if (jwtkeys.keys.length != 1) {\r\n    ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\r\n    ////            return false;\r\n    ////        }\r\n    ////    }\r\n\r\n    ////    return true;\r\n    //// }\r\n\r\n    // Access Token Validation\r\n    // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n    // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n    // access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n    // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\r\n    // is present in the ID Token.\r\n    validate_id_token_at_hash(access_token: any, at_hash: any, isCodeFlow: boolean): boolean {\r\n        this.loggerService.logDebug('at_hash from the server:' + at_hash);\r\n\r\n        // The at_hash is optional for the code flow\r\n        if (isCodeFlow) {\r\n            if (!(at_hash as string)) {\r\n                this.loggerService.logDebug('Code Flow active, and no at_hash in the id_token, skipping check!');\r\n                return true;\r\n            }\r\n        }\r\n\r\n        const testdata = this.generate_at_hash('' + access_token);\r\n        this.loggerService.logDebug('at_hash client validation not decoded:' + testdata);\r\n        if (testdata === (at_hash as string)) {\r\n            return true; // isValid;\r\n        } else {\r\n            const testValue = this.generate_at_hash('' + decodeURIComponent(access_token));\r\n            this.loggerService.logDebug('-gen access--' + testValue);\r\n            if (testValue === (at_hash as string)) {\r\n                return true; // isValid\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private generate_at_hash(access_token: any): string {\r\n        const hash = KJUR.crypto.Util.hashString(access_token, 'sha256');\r\n        const first128bits = hash.substr(0, hash.length / 2);\r\n        const testdata = hextob64u(first128bits);\r\n\r\n        return testdata;\r\n    }\r\n\r\n    generate_code_verifier(code_challenge: any): string {\r\n        const hash = KJUR.crypto.Util.hashString(code_challenge, 'sha256');\r\n        const testdata = hextob64u(hash);\r\n\r\n        return testdata;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\nimport { JwtKeys } from '../models/jwtkeys';\r\nimport { ValidateStateResult } from '../models/validate-state-result.model';\r\nimport { ValidationResult } from '../models/validation-result.enum';\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { OidcSecurityValidation } from './oidc.security.validation';\r\n\r\n@Injectable()\r\nexport class StateValidationService {\r\n    private authWellKnownEndpoints = new AuthWellKnownEndpoints();\r\n    constructor(\r\n        private authConfiguration: AuthConfiguration,\r\n        public oidcSecurityCommon: OidcSecurityCommon,\r\n        private oidcSecurityValidation: OidcSecurityValidation,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService\r\n    ) {}\r\n\r\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\r\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\r\n    }\r\n\r\n    validateState(result: any, jwtKeys: JwtKeys): ValidateStateResult {\r\n        const toReturn = new ValidateStateResult();\r\n        if (!this.oidcSecurityValidation.validateStateFromHashCallback(result.state, this.oidcSecurityCommon.authStateControl)) {\r\n            this.loggerService.logWarning('authorizedCallback incorrect state');\r\n            toReturn.state = ValidationResult.StatesDoNotMatch;\r\n            return toReturn;\r\n        }\r\n\r\n        if (this.authConfiguration.response_type === 'id_token token' || this.authConfiguration.response_type === 'code') {\r\n            toReturn.access_token = result.access_token;\r\n        }\r\n\r\n        toReturn.id_token = result.id_token;\r\n\r\n        toReturn.decoded_id_token = this.tokenHelperService.getPayloadFromToken(toReturn.id_token, false);\r\n\r\n        if (!this.oidcSecurityValidation.validate_signature_id_token(toReturn.id_token, jwtKeys)) {\r\n            this.loggerService.logDebug('authorizedCallback Signature validation failed id_token');\r\n            toReturn.state = ValidationResult.SignatureFailed;\r\n            return toReturn;\r\n        }\r\n\r\n        if (!this.oidcSecurityValidation.validate_id_token_nonce(toReturn.decoded_id_token, this.oidcSecurityCommon.authNonce)) {\r\n            this.loggerService.logWarning('authorizedCallback incorrect nonce');\r\n            toReturn.state = ValidationResult.IncorrectNonce;\r\n            return toReturn;\r\n        }\r\n\r\n        if (!this.oidcSecurityValidation.validate_required_id_token(toReturn.decoded_id_token)) {\r\n            this.loggerService.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\r\n            toReturn.state = ValidationResult.RequiredPropertyMissing;\r\n            return toReturn;\r\n        }\r\n\r\n        if (\r\n            !this.oidcSecurityValidation.validate_id_token_iat_max_offset(\r\n                toReturn.decoded_id_token,\r\n                this.authConfiguration.max_id_token_iat_offset_allowed_in_seconds,\r\n                this.authConfiguration.disable_iat_offset_validation\r\n            )\r\n        ) {\r\n            this.loggerService.logWarning('authorizedCallback Validation, iat rejected id_token was issued too far away from the current time');\r\n            toReturn.state = ValidationResult.MaxOffsetExpired;\r\n            return toReturn;\r\n        }\r\n\r\n        if (this.authWellKnownEndpoints) {\r\n            if (this.authConfiguration.iss_validation_off) {\r\n                this.loggerService.logDebug('iss validation is turned off, this is not recommended!');\r\n            } else if (!this.authConfiguration.iss_validation_off &&\r\n                !this.oidcSecurityValidation.validate_id_token_iss(toReturn.decoded_id_token, this.authWellKnownEndpoints.issuer)) {\r\n                this.loggerService.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\r\n                toReturn.state = ValidationResult.IssDoesNotMatchIssuer;\r\n                return toReturn;\r\n            }\r\n        } else {\r\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n            toReturn.state = ValidationResult.NoAuthWellKnownEndPoints;\r\n            return toReturn;\r\n        }\r\n\r\n        if (!this.oidcSecurityValidation.validate_id_token_aud(toReturn.decoded_id_token, this.authConfiguration.client_id)) {\r\n            this.loggerService.logWarning('authorizedCallback incorrect aud');\r\n            toReturn.state = ValidationResult.IncorrectAud;\r\n            return toReturn;\r\n        }\r\n\r\n        if (!this.oidcSecurityValidation.validate_id_token_exp_not_expired(toReturn.decoded_id_token)) {\r\n            this.loggerService.logWarning('authorizedCallback token expired');\r\n            toReturn.state = ValidationResult.TokenExpired;\r\n            return toReturn;\r\n        }\r\n\r\n        // flow id_token token\r\n        if (this.authConfiguration.response_type !== 'id_token token' && this.authConfiguration.response_type !== 'code') {\r\n            toReturn.authResponseIsValid = true;\r\n            toReturn.state = ValidationResult.Ok;\r\n            this.handleSuccessfulValidation();\r\n            return toReturn;\r\n        }\r\n\r\n        if (!this.oidcSecurityValidation.validate_id_token_at_hash(toReturn.access_token,\r\n            toReturn.decoded_id_token.at_hash,\r\n            this.authConfiguration.response_type === 'code') ||\r\n            !toReturn.access_token\r\n        ) {\r\n            this.loggerService.logWarning('authorizedCallback incorrect at_hash');\r\n            toReturn.state = ValidationResult.IncorrectAtHash;\r\n            return toReturn;\r\n        }\r\n\r\n        toReturn.authResponseIsValid = true;\r\n        toReturn.state = ValidationResult.Ok;\r\n        this.handleSuccessfulValidation();\r\n        return toReturn;\r\n    }\r\n\r\n    private handleSuccessfulValidation() {\r\n        this.oidcSecurityCommon.authNonce = '';\r\n\r\n        if (this.authConfiguration.auto_clean_state_after_authentication) {\r\n            this.oidcSecurityCommon.authStateControl = '';\r\n        }\r\n        this.loggerService.logDebug('AuthorizedCallback token(s) validated, continue');\r\n    }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { from, Observable, Observer, Subject } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\nimport { IFrameService } from './existing-iframe.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\n\r\nconst IFRAME_FOR_CHECK_SESSION_IDENTIFIER = 'myiFrameForCheckSession';\r\n\r\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\r\n\r\n@Injectable()\r\nexport class OidcSecurityCheckSession {\r\n    private sessionIframe: any;\r\n    private iframeMessageEvent: any;\r\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\r\n    private scheduledHeartBeat: any;\r\n    private lastIFrameRefresh = 0;\r\n    private outstandingMessages = 0;\r\n    private heartBeatInterval = 3000;\r\n    private iframeRefreshInterval = 60000;\r\n    private _onCheckSessionChanged = new Subject<any>();\r\n\r\n    public get onCheckSessionChanged(): Observable<any> {\r\n        return this._onCheckSessionChanged.asObservable();\r\n    }\r\n\r\n    constructor(\r\n        private authConfiguration: AuthConfiguration,\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private loggerService: LoggerService,\r\n        private iFrameService: IFrameService,\r\n        private zone: NgZone\r\n    ) {}\r\n\r\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\r\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\r\n    }\r\n\r\n    private doesSessionExist(): boolean {\r\n        const existingIFrame = this.iFrameService.getExistingIFrame(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\r\n\r\n        if (!existingIFrame) {\r\n            return false;\r\n        }\r\n\r\n        this.sessionIframe = existingIFrame;\r\n        return true;\r\n    }\r\n\r\n    private init() {\r\n        if (this.lastIFrameRefresh + this.iframeRefreshInterval > Date.now()) {\r\n            return from([this]);\r\n        }\r\n\r\n        if (!this.doesSessionExist()) {\r\n            this.sessionIframe = this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\r\n            this.iframeMessageEvent = this.messageHandler.bind(this);\r\n            window.addEventListener('message', this.iframeMessageEvent, false);\r\n        }\r\n\r\n        if (this.authWellKnownEndpoints) {\r\n            this.sessionIframe.contentWindow.location.replace(this.authWellKnownEndpoints.check_session_iframe);\r\n        } else {\r\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        return Observable.create((observer: Observer<OidcSecurityCheckSession>) => {\r\n            this.sessionIframe.onload = () => {\r\n                this.lastIFrameRefresh = Date.now();\r\n                observer.next(this);\r\n                observer.complete();\r\n            };\r\n        });\r\n    }\r\n\r\n    startCheckingSession(clientId: string): void {\r\n        if (this.scheduledHeartBeat) {\r\n            return;\r\n        }\r\n\r\n        this.pollServerSession(clientId);\r\n    }\r\n\r\n    stopCheckingSession(): void {\r\n        if (!this.scheduledHeartBeat) {\r\n            return;\r\n        }\r\n\r\n        this.clearScheduledHeartBeat();\r\n    }\r\n\r\n    private pollServerSession(clientId: string) {\r\n        const _pollServerSessionRecur = () => {\r\n            this.init()\r\n                .pipe(take(1))\r\n                .subscribe(() => {\r\n                    if (this.sessionIframe && clientId) {\r\n                        this.loggerService.logDebug(this.sessionIframe);\r\n                        const session_state = this.oidcSecurityCommon.sessionState;\r\n                        if (session_state) {\r\n                            this.outstandingMessages++;\r\n                            this.sessionIframe.contentWindow.postMessage(clientId + ' ' + session_state, this.authConfiguration.stsServer);\r\n                        } else {\r\n                            this.loggerService.logDebug('OidcSecurityCheckSession pollServerSession session_state is blank');\r\n                            this._onCheckSessionChanged.next();\r\n                        }\r\n                    } else {\r\n                        this.loggerService.logWarning('OidcSecurityCheckSession pollServerSession sessionIframe does not exist');\r\n                        this.loggerService.logDebug(clientId);\r\n                        this.loggerService.logDebug(this.sessionIframe);\r\n                        // this.init();\r\n                    }\r\n\r\n                    // after sending three messages with no response, fail.\r\n                    if (this.outstandingMessages > 3) {\r\n                        this.loggerService.logError(\r\n                            `OidcSecurityCheckSession not receiving check session response messages. Outstanding messages: ${\r\n                                this.outstandingMessages\r\n                            }. Server unreachable?`\r\n                        );\r\n                        this._onCheckSessionChanged.next();\r\n                    }\r\n\r\n                    this.scheduledHeartBeat = setTimeout(_pollServerSessionRecur, this.heartBeatInterval);\r\n                });\r\n        };\r\n\r\n        this.outstandingMessages = 0;\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n            this.scheduledHeartBeat = setTimeout(_pollServerSessionRecur, this.heartBeatInterval);\r\n        });\r\n    }\r\n    private clearScheduledHeartBeat() {\r\n        clearTimeout(this.scheduledHeartBeat);\r\n        this.scheduledHeartBeat = null;\r\n    }\r\n\r\n    private messageHandler(e: any) {\r\n        this.outstandingMessages = 0;\r\n        if (this.sessionIframe && e.origin === this.authConfiguration.stsServer && e.source === this.sessionIframe.contentWindow) {\r\n            if (e.data === 'error') {\r\n                this.loggerService.logWarning('error from checksession messageHandler');\r\n            } else if (e.data === 'changed') {\r\n                this._onCheckSessionChanged.next();\r\n            } else {\r\n                this.loggerService.logDebug(e.data + ' from checksession messageHandler');\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class OidcConfigService {\r\n    private _onConfigurationLoaded = new Subject<boolean>();\r\n    clientConfiguration: any;\r\n    wellKnownEndpoints: any;\r\n\r\n    public get onConfigurationLoaded(): Observable<boolean> {\r\n        return this._onConfigurationLoaded.asObservable();\r\n    }\r\n\r\n    constructor(private readonly httpClient: HttpClient) {}\r\n\r\n    load(configUrl: string) {\r\n        this.httpClient\r\n            .get(configUrl)\r\n            .pipe(\r\n                map(response => {\r\n                    this.clientConfiguration = response;\r\n                    this.load_using_stsServer(this.clientConfiguration.stsServer);\r\n                }),\r\n                catchError(error => {\r\n                    console.error(`OidcConfigService 'load' threw an error on calling ${configUrl}`, error);\r\n                    this._onConfigurationLoaded.next(false);\r\n                    return of(false);\r\n                })\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    load_using_stsServer(stsServer: string) {\r\n        const url = `${stsServer}/.well-known/openid-configuration`;\r\n\r\n        this.httpClient\r\n            .get(url)\r\n            .pipe(\r\n                map(response => {\r\n                    this.wellKnownEndpoints = response;\r\n                    this._onConfigurationLoaded.next(true);\r\n                }),\r\n                catchError(error => {\r\n                    console.error(`OidcConfigService 'load_using_stsServer' threw an error on calling ${stsServer}`, error);\r\n                    this._onConfigurationLoaded.next(false);\r\n                    return of(false);\r\n                })\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    load_using_custom_stsServer(url: string) {\r\n        this.httpClient\r\n            .get(url)\r\n            .pipe(\r\n                map(response => {\r\n                    this.wellKnownEndpoints = response;\r\n                    this._onConfigurationLoaded.next(true);\r\n                }),\r\n                catchError(error => {\r\n                    console.error(`OidcConfigService 'load_using_custom_stsServer' threw an error on calling ${url}`, error);\r\n                    this._onConfigurationLoaded.next(false);\r\n                    return of(false);\r\n                })\r\n            )\r\n            .subscribe();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Observer } from 'rxjs';\r\nimport { IFrameService } from './existing-iframe.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\nconst IFRAME_FOR_SILENT_RENEW_IDENTIFIER = 'myiFrameForSilentRenew';\r\n\r\n@Injectable()\r\nexport class OidcSecuritySilentRenew {\r\n    private sessionIframe: any;\r\n    private isRenewInitialized = false;\r\n\r\n    constructor(private loggerService: LoggerService, private iFrameService: IFrameService) {}\r\n\r\n    initRenew() {\r\n        const existingIFrame = this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\r\n\r\n        if (!existingIFrame) {\r\n            this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\r\n        }\r\n\r\n        this.isRenewInitialized = true;\r\n    }\r\n\r\n    startRenew(url: string): Observable<any> {\r\n        if (!this.isRenewInitialized) {\r\n            this.initRenew();\r\n        }\r\n\r\n        this.sessionIframe = this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\r\n\r\n        this.loggerService.logDebug('startRenew for URL:' + url);\r\n        this.sessionIframe.contentWindow.location.replace(url);\r\n\r\n        return Observable.create((observer: Observer<any>) => {\r\n            this.sessionIframe.onload = () => {\r\n                observer.next(this);\r\n                observer.complete();\r\n            };\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { OidcDataService } from '../data-services/oidc-data.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\n\r\n@Injectable()\r\nexport class OidcSecurityUserService {\r\n    private userData: any = '';\r\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\r\n\r\n    constructor(private oidcDataService: OidcDataService, private oidcSecurityCommon: OidcSecurityCommon, private loggerService: LoggerService) {}\r\n\r\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\r\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\r\n    }\r\n\r\n    initUserData() {\r\n        return this.getIdentityUserData().pipe(map((data: any) => (this.userData = data)));\r\n    }\r\n\r\n    getUserData(): any {\r\n        if (!this.userData) {\r\n            throw Error('UserData is not set!');\r\n        }\r\n\r\n        return this.userData;\r\n    }\r\n\r\n    setUserData(value: any): void {\r\n        this.userData = value;\r\n    }\r\n\r\n    private getIdentityUserData(): Observable<any> {\r\n        const token = this.oidcSecurityCommon.getAccessToken();\r\n\r\n        if (!this.authWellKnownEndpoints) {\r\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\r\n\r\n            throw Error('authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        const canGetUserData = this.authWellKnownEndpoints && this.authWellKnownEndpoints.userinfo_endpoint;\r\n\r\n        if (!canGetUserData) {\r\n            this.loggerService.logError(\r\n                'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config'\r\n            );\r\n            throw Error('authWellKnownEndpoints.userinfo_endpoint is undefined');\r\n        }\r\n\r\n        return this.oidcDataService.getIdentityUserData(this.authWellKnownEndpoints.userinfo_endpoint, token);\r\n    }\r\n}\r\n","import { HttpParameterCodec } from '@angular/common/http';\r\n\r\nexport class UriEncoder implements HttpParameterCodec {\r\n    encodeKey(key: string): string {\r\n        return encodeURIComponent(key);\r\n    }\r\n\r\n    encodeValue(value: string): string {\r\n        return encodeURIComponent(value);\r\n    }\r\n\r\n    decodeKey(key: string): string {\r\n        return decodeURIComponent(key);\r\n    }\r\n\r\n    decodeValue(value: string): string {\r\n        return decodeURIComponent(value);\r\n    }\r\n}\r\n","import { HttpParams, HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable, NgZone } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject, from, Observable, Subject, throwError as observableThrowError, timer, of } from 'rxjs';\r\nimport { catchError, filter, map, race, shareReplay, switchMap, switchMapTo, take, tap } from 'rxjs/operators';\r\nimport { OidcDataService } from '../data-services/oidc-data.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\nimport { AuthorizationResult } from '../models/authorization-result';\r\nimport { AuthorizationState } from '../models/authorization-state.enum';\r\nimport { JwtKeys } from '../models/jwtkeys';\r\nimport { ValidateStateResult } from '../models/validate-state-result.model';\r\nimport { ValidationResult } from '../models/validation-result.enum';\r\nimport { AuthConfiguration, OpenIDImplicitFlowConfiguration } from '../modules/auth.configuration';\r\nimport { StateValidationService } from './oidc-security-state-validation.service';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { OidcSecurityCheckSession } from './oidc.security.check-session';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { OidcSecuritySilentRenew } from './oidc.security.silent-renew';\r\nimport { OidcSecurityUserService } from './oidc.security.user-service';\r\nimport { OidcSecurityValidation } from './oidc.security.validation';\r\nimport { UriEncoder } from './uri-encoder';\r\n\r\n@Injectable()\r\nexport class OidcSecurityService {\r\n    private _onModuleSetup = new Subject<boolean>();\r\n    private _onCheckSessionChanged = new Subject<boolean>();\r\n    private _onAuthorizationResult = new Subject<AuthorizationResult>();\r\n\r\n    public get onModuleSetup(): Observable<boolean> {\r\n        return this._onModuleSetup.asObservable();\r\n    }\r\n\r\n    public get onAuthorizationResult(): Observable<AuthorizationResult> {\r\n        return this._onAuthorizationResult.asObservable();\r\n    }\r\n\r\n    public get onCheckSessionChanged(): Observable<boolean> {\r\n        return this._onCheckSessionChanged.asObservable();\r\n    }\r\n\r\n    public get onConfigurationChange(): Observable<OpenIDImplicitFlowConfiguration> {\r\n        return this.authConfiguration.onConfigurationChange;\r\n    }\r\n\r\n    checkSessionChanged = false;\r\n    moduleSetup = false;\r\n\r\n    private _isModuleSetup = new BehaviorSubject<boolean>(false);\r\n\r\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\r\n    private _isAuthorized = new BehaviorSubject<boolean>(false);\r\n    private _isSetupAndAuthorized: Observable<boolean>;\r\n\r\n    private _userData = new BehaviorSubject<any>('');\r\n    private authWellKnownEndpointsLoaded = false;\r\n    private runTokenValidationRunning = false;\r\n    private _scheduledHeartBeat: any;\r\n    private boundSilentRenewEvent: any;\r\n\r\n    constructor(\r\n        private oidcDataService: OidcDataService,\r\n        private stateValidationService: StateValidationService,\r\n        private authConfiguration: AuthConfiguration,\r\n        private router: Router,\r\n        private oidcSecurityCheckSession: OidcSecurityCheckSession,\r\n        private oidcSecuritySilentRenew: OidcSecuritySilentRenew,\r\n        private oidcSecurityUserService: OidcSecurityUserService,\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private oidcSecurityValidation: OidcSecurityValidation,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService,\r\n        private zone: NgZone,\r\n        private readonly httpClient: HttpClient\r\n    ) {\r\n        this.onModuleSetup.pipe(take(1)).subscribe(() => {\r\n            this.moduleSetup = true;\r\n            this._isModuleSetup.next(true);\r\n        });\r\n\r\n        this._isSetupAndAuthorized = this._isModuleSetup.pipe(\r\n            filter((isModuleSetup: boolean) => isModuleSetup),\r\n            switchMap(() => {\r\n                if (!this.authConfiguration.silent_renew) {\r\n                    return from([true]).pipe(tap(() => this.loggerService.logDebug(`IsAuthorizedRace: Silent Renew Not Active. Emitting.`)));\r\n                }\r\n\r\n                const race$ = this._isAuthorized.asObservable().pipe(\r\n                    filter((isAuthorized: boolean) => isAuthorized),\r\n                    take(1),\r\n                    tap(() => this.loggerService.logDebug('IsAuthorizedRace: Existing token is still authorized.')),\r\n                    race(\r\n                        this._onAuthorizationResult.pipe(\r\n                            take(1),\r\n                            tap(() => this.loggerService.logDebug('IsAuthorizedRace: Silent Renew Refresh Session Complete')),\r\n                            map(() => true)\r\n                        ),\r\n                        timer(5000).pipe(\r\n                            // backup, if nothing happens after 5 seconds stop waiting and emit\r\n                            tap(() => this.loggerService.logWarning('IsAuthorizedRace: Timeout reached. Emitting.')),\r\n                            map(() => true)\r\n                        )\r\n                    )\r\n                );\r\n\r\n                this.loggerService.logDebug('Silent Renew is active, check if token in storage is active');\r\n                if (this.oidcSecurityCommon.authNonce === '' || this.oidcSecurityCommon.authNonce === undefined) {\r\n                    // login not running, or a second silent renew, user must login first before this will work.\r\n                    this.loggerService.logDebug('Silent Renew or login not running, try to refresh the session');\r\n                    this.refreshSession();\r\n                }\r\n\r\n                return race$;\r\n            }),\r\n            tap(() => this.loggerService.logDebug('IsAuthorizedRace: Completed')),\r\n            switchMapTo(this._isAuthorized.asObservable()),\r\n            tap((isAuthorized: boolean) => this.loggerService.logDebug(`getIsAuthorized: ${isAuthorized}`)),\r\n            shareReplay(1)\r\n        );\r\n\r\n        this._isSetupAndAuthorized.pipe(filter(() => this.authConfiguration.start_checksession)).subscribe(isSetupAndAuthorized => {\r\n            if (isSetupAndAuthorized) {\r\n                this.oidcSecurityCheckSession.startCheckingSession(this.authConfiguration.client_id);\r\n            } else {\r\n                this.oidcSecurityCheckSession.stopCheckingSession();\r\n            }\r\n        });\r\n    }\r\n\r\n    setupModule(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration, authWellKnownEndpoints: AuthWellKnownEndpoints): void {\r\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\r\n        this.authConfiguration.init(openIDImplicitFlowConfiguration);\r\n        this.stateValidationService.setupModule(authWellKnownEndpoints);\r\n        this.oidcSecurityCheckSession.setupModule(authWellKnownEndpoints);\r\n        this.oidcSecurityUserService.setupModule(authWellKnownEndpoints);\r\n\r\n        this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(() => {\r\n            this.loggerService.logDebug('onCheckSessionChanged');\r\n            this.checkSessionChanged = true;\r\n            this._onCheckSessionChanged.next(this.checkSessionChanged);\r\n        });\r\n\r\n        const userData = this.oidcSecurityCommon.userData;\r\n        if (userData) {\r\n            this.setUserData(userData);\r\n        }\r\n\r\n        const isAuthorized = this.oidcSecurityCommon.isAuthorized;\r\n        if (isAuthorized) {\r\n            this.loggerService.logDebug('IsAuthorized setup module');\r\n            this.loggerService.logDebug(this.oidcSecurityCommon.idToken);\r\n            if (this.oidcSecurityValidation.isTokenExpired(this.oidcSecurityCommon.idToken, this.authConfiguration.silent_renew_offset_in_seconds)) {\r\n                this.loggerService.logDebug('IsAuthorized setup module; id_token isTokenExpired');\r\n            } else {\r\n                this.loggerService.logDebug('IsAuthorized setup module; id_token is valid');\r\n                this.setIsAuthorized(isAuthorized);\r\n            }\r\n            this.runTokenValidation();\r\n        }\r\n\r\n        this.loggerService.logDebug('STS server: ' + this.authConfiguration.stsServer);\r\n\r\n        this._onModuleSetup.next();\r\n\r\n        if (this.authConfiguration.silent_renew) {\r\n            this.oidcSecuritySilentRenew.initRenew();\r\n\r\n            // Support authorization via DOM events.\r\n            // Deregister if OidcSecurityService.setupModule is called again by any instance.\r\n            //      We only ever want the latest setup service to be reacting to this event.\r\n            this.boundSilentRenewEvent = this.silentRenewEventHandler.bind(this);\r\n\r\n            const instanceId = Math.random();\r\n\r\n            const boundSilentRenewInitEvent = ((e: CustomEvent) => {\r\n                if (e.detail !== instanceId) {\r\n                    window.removeEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent);\r\n                    window.removeEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent);\r\n                }\r\n            }).bind(this);\r\n\r\n            window.addEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent, false);\r\n            window.addEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent, false);\r\n\r\n            window.dispatchEvent(\r\n                new CustomEvent('oidc-silent-renew-init', {\r\n                    detail: instanceId,\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    getUserData(): Observable<any> {\r\n        return this._userData.asObservable();\r\n    }\r\n\r\n    getIsModuleSetup(): Observable<boolean> {\r\n        return this._isModuleSetup.asObservable();\r\n    }\r\n\r\n    getIsAuthorized(): Observable<boolean> {\r\n        return this._isSetupAndAuthorized;\r\n    }\r\n\r\n    getToken(): string {\r\n        if (!this._isAuthorized.getValue()) {\r\n            return '';\r\n        }\r\n\r\n        const token = this.oidcSecurityCommon.getAccessToken();\r\n        return decodeURIComponent(token);\r\n    }\r\n\r\n    getIdToken(): string {\r\n        if (!this._isAuthorized.getValue()) {\r\n            return '';\r\n        }\r\n\r\n        const token = this.oidcSecurityCommon.getIdToken();\r\n        return decodeURIComponent(token);\r\n    }\r\n\r\n    getPayloadFromIdToken(encode = false): any {\r\n        const token = this.getIdToken();\r\n        return this.tokenHelperService.getPayloadFromToken(token, encode);\r\n    }\r\n\r\n    setState(state: string): void {\r\n        this.oidcSecurityCommon.authStateControl = state;\r\n    }\r\n\r\n    getState(): string {\r\n        return this.oidcSecurityCommon.authStateControl;\r\n    }\r\n\r\n    setCustomRequestParameters(params: { [key: string]: string | number | boolean }) {\r\n        this.oidcSecurityCommon.customRequestParams = params;\r\n    }\r\n\r\n    // Code Flow with PCKE or Implicit Flow\r\n    authorize(urlHandler?: (url: string) => any) {\r\n        if (this.authWellKnownEndpoints) {\r\n            this.authWellKnownEndpointsLoaded = true;\r\n        }\r\n\r\n        if (!this.authWellKnownEndpointsLoaded) {\r\n            this.loggerService.logError('Well known endpoints must be loaded before user can login!');\r\n            return;\r\n        }\r\n\r\n        if (!this.oidcSecurityValidation.config_validate_response_type(this.authConfiguration.response_type)) {\r\n            // invalid response_type\r\n            return;\r\n        }\r\n\r\n        this.resetAuthorizationData(false);\r\n\r\n        this.loggerService.logDebug('BEGIN Authorize Code Flow, no auth data');\r\n\r\n        let state = this.oidcSecurityCommon.authStateControl;\r\n        if (!state) {\r\n            state = Date.now() + '' + Math.random() + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.loggerService.logDebug('AuthorizedController created. local state: ' + this.oidcSecurityCommon.authStateControl);\r\n\r\n        let url = '';\r\n        // Code Flow\r\n        if (this.authConfiguration.response_type === 'code') {\r\n\r\n            // code_challenge with \"S256\"\r\n            const code_verifier = 'C' + Math.random() + '' + Date.now() + '' + Date.now() + Math.random();\r\n            const code_challenge = this.oidcSecurityValidation.generate_code_verifier(code_verifier);\r\n\r\n            this.oidcSecurityCommon.code_verifier = code_verifier;\r\n\r\n            if (this.authWellKnownEndpoints) {\r\n                url = this.createAuthorizeUrl(true, code_challenge,\r\n                    this.authConfiguration.redirect_url,\r\n                    nonce,\r\n                    state,\r\n                    this.authWellKnownEndpoints.authorization_endpoint\r\n                );\r\n            } else {\r\n                this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n            }\r\n        } else { // Implicit Flow\r\n\r\n            if (this.authWellKnownEndpoints) {\r\n                url = this.createAuthorizeUrl(false, '',\r\n                    this.authConfiguration.redirect_url,\r\n                    nonce,\r\n                    state,\r\n                    this.authWellKnownEndpoints.authorization_endpoint\r\n                );\r\n            } else {\r\n                this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n            }\r\n        }\r\n\r\n        if (urlHandler) {\r\n            urlHandler(url);\r\n        } else {\r\n            this.redirectTo(url);\r\n        }\r\n    }\r\n\r\n    // Code Flow\r\n    authorizedCallbackWithCode(urlToCheck: string) {\r\n        const urlParts = urlToCheck.split('?');\r\n        const params = new HttpParams({\r\n            fromString: urlParts[1]\r\n        });\r\n        const code = params.get('code');\r\n        const state = params.get('state');\r\n        const session_state = params.get('session_state');\r\n\r\n        if (code && state) {\r\n            this.requestTokensWithCode(code, state, session_state);\r\n        }\r\n    }\r\n\r\n    // Code Flow\r\n    requestTokensWithCode(code: string, state: string, session_state: string | null) {\r\n        this._isModuleSetup\r\n            .pipe(\r\n                filter((isModuleSetup: boolean) => isModuleSetup),\r\n                take(1)\r\n            )\r\n            .subscribe(() => {\r\n                this.requestTokensWithCodeProcedure(code, state, session_state);\r\n            });\r\n    }\r\n\r\n    // Code Flow with PCKE\r\n    requestTokensWithCodeProcedure(code: string, state: string, session_state: string | null) {\r\n        let tokenRequestUrl = '';\r\n        if (this.authWellKnownEndpoints && this.authWellKnownEndpoints.token_endpoint) {\r\n            tokenRequestUrl = `${this.authWellKnownEndpoints.token_endpoint}`;\r\n        }\r\n\r\n        if (!this.oidcSecurityValidation.validateStateFromHashCallback(state, this.oidcSecurityCommon.authStateControl)) {\r\n            this.loggerService.logWarning('authorizedCallback incorrect state');\r\n            // ValidationResult.StatesDoNotMatch;\r\n            return;\r\n        }\r\n\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n        let data = `grant_type=authorization_code&client_id=${this.authConfiguration.client_id}`\r\n            + `&code_verifier=${this.oidcSecurityCommon.code_verifier}&code=${code}&redirect_uri=${this.authConfiguration.redirect_url}`;\r\n        if (this.oidcSecurityCommon.silentRenewRunning === 'running') {\r\n            data = `grant_type=authorization_code&client_id=${this.authConfiguration.client_id}`\r\n                + `&code_verifier=${this.oidcSecurityCommon.code_verifier}&code=${code}&redirect_uri=${this.authConfiguration.silent_redirect_url}`;\r\n        }\r\n\r\n        this.httpClient\r\n            .post(tokenRequestUrl, data, { headers: headers })\r\n            .pipe(\r\n            map(response => {\r\n                    let obj: any = new Object;\r\n                    obj = response;\r\n                    obj.state = state;\r\n                    obj.session_state = session_state;\r\n\r\n                    this.authorizedCodeFlowCallbackProcedure(obj);\r\n                }),\r\n            catchError(error => {\r\n                    this.loggerService.logError(error);\r\n                    this.loggerService.logError(`OidcService code request ${this.authConfiguration.stsServer}`);\r\n                    return of(false);\r\n                })\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    // Code Flow\r\n    private authorizedCodeFlowCallbackProcedure(result: any) {\r\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n        const isRenewProcess = silentRenew === 'running';\r\n\r\n        this.loggerService.logDebug('BEGIN authorized Code Flow Callback, no auth data');\r\n        this.resetAuthorizationData(isRenewProcess);\r\n\r\n        this.authorizedCallbackProcedure(result, isRenewProcess);\r\n    }\r\n\r\n    // Implicit Flow\r\n    private authorizedImplicitFlowCallbackProcedure(hash?: string) {\r\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n        const isRenewProcess = silentRenew === 'running';\r\n\r\n        this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\r\n        this.resetAuthorizationData(isRenewProcess);\r\n\r\n        hash = hash || window.location.hash.substr(1);\r\n\r\n        const result: any = hash.split('&').reduce(function (resultData: any, item: string) {\r\n            const parts = item.split('=');\r\n            resultData[<string>parts.shift()] = parts.join('=');\r\n            return resultData;\r\n        }, {});\r\n\r\n        this.authorizedCallbackProcedure(result, isRenewProcess);\r\n    }\r\n\r\n    // Implicit Flow\r\n    authorizedImplicitFlowCallback(hash?: string) {\r\n        this._isModuleSetup\r\n            .pipe(\r\n                filter((isModuleSetup: boolean) => isModuleSetup),\r\n                take(1)\r\n            )\r\n            .subscribe(() => {\r\n                this.authorizedImplicitFlowCallbackProcedure(hash);\r\n            });\r\n    }\r\n\r\n    private redirectTo(url: string) {\r\n        window.location.href = url;\r\n    }\r\n\r\n    // Implicit Flow\r\n    private authorizedCallbackProcedure(result: any, isRenewProcess: boolean) {\r\n        this.oidcSecurityCommon.authResult = result;\r\n\r\n        if (!this.authConfiguration.history_cleanup_off && !isRenewProcess) {\r\n            // reset the history to remove the tokens\r\n            window.history.replaceState({}, window.document.title, window.location.origin + window.location.pathname);\r\n        } else {\r\n            this.loggerService.logDebug('history clean up inactive');\r\n        }\r\n\r\n        if (result.error) {\r\n            this.loggerService.logWarning(result);\r\n            if ((result.error as string) === 'login_required') {\r\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.LoginRequired));\r\n            } else {\r\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.SecureTokenServerError));\r\n            }\r\n\r\n            if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                this.router.navigate([this.authConfiguration.unauthorized_route]);\r\n            }\r\n        } else {\r\n            this.loggerService.logDebug(result);\r\n\r\n            this.loggerService.logDebug('authorizedCallback created, begin token validation');\r\n\r\n            this.getSigningKeys().subscribe(\r\n                jwtKeys => {\r\n                    const validationResult = this.getValidatedStateResult(result, jwtKeys);\r\n\r\n                    if (validationResult.authResponseIsValid) {\r\n                        this.setAuthorizationData(validationResult.access_token, validationResult.id_token);\r\n                        this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n                        if (this.authConfiguration.auto_userinfo) {\r\n                            this.getUserinfo(isRenewProcess, result, validationResult.id_token, validationResult.decoded_id_token).subscribe(\r\n                                response => {\r\n                                    if (response) {\r\n                                        this._onAuthorizationResult.next(\r\n                                            new AuthorizationResult(AuthorizationState.authorized, validationResult.state)\r\n                                        );\r\n                                        if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                            this.router.navigate([this.authConfiguration.post_login_route]);\r\n                                        }\r\n                                    } else {\r\n                                        this._onAuthorizationResult.next(\r\n                                            new AuthorizationResult(AuthorizationState.unauthorized, validationResult.state)\r\n                                        );\r\n                                        if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                            this.router.navigate([this.authConfiguration.unauthorized_route]);\r\n                                        }\r\n                                    }\r\n                                },\r\n                                err => {\r\n                                    /* Something went wrong while getting signing key */\r\n                                    this.loggerService.logWarning('Failed to retreive user info with error: ' + JSON.stringify(err));\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (!isRenewProcess) {\r\n                                // userData is set to the id_token decoded, auto get user data set to false\r\n                                this.oidcSecurityUserService.setUserData(validationResult.decoded_id_token);\r\n                                this.setUserData(this.oidcSecurityUserService.getUserData());\r\n                            }\r\n\r\n                            this.runTokenValidation();\r\n\r\n                            this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.authorized, validationResult.state));\r\n                            if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                this.router.navigate([this.authConfiguration.post_login_route]);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // something went wrong\r\n                        this.loggerService.logWarning('authorizedCallback, token(s) validation failed, resetting');\r\n                        this.loggerService.logWarning(window.location.hash);\r\n                        this.resetAuthorizationData(false);\r\n                        this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n                        this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, validationResult.state));\r\n                        if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                            this.router.navigate([this.authConfiguration.unauthorized_route]);\r\n                        }\r\n                    }\r\n                },\r\n                err => {\r\n                    /* Something went wrong while getting signing key */\r\n                    this.loggerService.logWarning('Failed to retreive siging key with error: ' + JSON.stringify(err));\r\n                    this.oidcSecurityCommon.silentRenewRunning = '';\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    getUserinfo(isRenewProcess = false, result?: any, id_token?: any, decoded_id_token?: any): Observable<boolean> {\r\n        result = result ? result : this.oidcSecurityCommon.authResult;\r\n        id_token = id_token ? id_token : this.oidcSecurityCommon.idToken;\r\n        decoded_id_token = decoded_id_token ? decoded_id_token : this.tokenHelperService.getPayloadFromToken(id_token, false);\r\n\r\n        return new Observable<boolean>(observer => {\r\n            // flow id_token token\r\n            if (this.authConfiguration.response_type === 'id_token token' || this.authConfiguration.response_type === 'code') {\r\n                if (isRenewProcess && this._userData.value) {\r\n                    this.oidcSecurityCommon.sessionState = result.session_state;\r\n                    observer.next(true);\r\n                    observer.complete();\r\n                } else {\r\n                    this.oidcSecurityUserService.initUserData().subscribe(() => {\r\n                        this.loggerService.logDebug('authorizedCallback (id_token token || code) flow');\r\n\r\n                        const userData = this.oidcSecurityUserService.getUserData();\r\n\r\n                        if (this.oidcSecurityValidation.validate_userdata_sub_id_token(decoded_id_token.sub, userData.sub)) {\r\n                            this.setUserData(userData);\r\n                            this.loggerService.logDebug(this.oidcSecurityCommon.accessToken);\r\n                            this.loggerService.logDebug(this.oidcSecurityUserService.getUserData());\r\n\r\n                            this.oidcSecurityCommon.sessionState = result.session_state;\r\n\r\n                            this.runTokenValidation();\r\n                            observer.next(true);\r\n                        } else {\r\n                            // something went wrong, userdata sub does not match that from id_token\r\n                            this.loggerService.logWarning('authorizedCallback, User data sub does not match sub in id_token');\r\n                            this.loggerService.logDebug('authorizedCallback, token(s) validation failed, resetting');\r\n                            this.resetAuthorizationData(false);\r\n                            observer.next(false);\r\n                        }\r\n                        observer.complete();\r\n                    });\r\n                }\r\n            } else {\r\n                // flow id_token\r\n                this.loggerService.logDebug('authorizedCallback id_token flow');\r\n                this.loggerService.logDebug(this.oidcSecurityCommon.accessToken);\r\n\r\n                // userData is set to the id_token decoded. No access_token.\r\n                this.oidcSecurityUserService.setUserData(decoded_id_token);\r\n                this.setUserData(this.oidcSecurityUserService.getUserData());\r\n\r\n                this.oidcSecurityCommon.sessionState = result.session_state;\r\n\r\n                this.runTokenValidation();\r\n\r\n                observer.next(true);\r\n                observer.complete();\r\n            }\r\n        });\r\n    }\r\n\r\n    logoff(urlHandler?: (url: string) => any) {\r\n        // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\r\n        this.loggerService.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        if (this.authWellKnownEndpoints) {\r\n            if (this.authWellKnownEndpoints.end_session_endpoint) {\r\n                const end_session_endpoint = this.authWellKnownEndpoints.end_session_endpoint;\r\n                const id_token_hint = this.oidcSecurityCommon.idToken;\r\n                const url = this.createEndSessionUrl(end_session_endpoint, id_token_hint);\r\n\r\n                this.resetAuthorizationData(false);\r\n\r\n                if (this.authConfiguration.start_checksession && this.checkSessionChanged) {\r\n                    this.loggerService.logDebug('only local login cleaned up, server session has changed');\r\n                } else if (urlHandler) {\r\n                    urlHandler(url);\r\n                } else {\r\n                    this.redirectTo(url);\r\n                }\r\n            } else {\r\n                this.resetAuthorizationData(false);\r\n                this.loggerService.logDebug('only local login cleaned up, no end_session_endpoint');\r\n            }\r\n        } else {\r\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n        }\r\n    }\r\n\r\n    refreshSession(): Observable<any> {\r\n        if (!this.authConfiguration.silent_renew) {\r\n            return from([false]);\r\n        }\r\n\r\n        this.loggerService.logDebug('BEGIN refresh session Authorize');\r\n\r\n        let state = this.oidcSecurityCommon.authStateControl;\r\n        if (state === '' || state === null) {\r\n            state = Date.now() + '' + Math.random() + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.loggerService.logDebug('RefreshSession created. adding myautostate: ' + this.oidcSecurityCommon.authStateControl);\r\n\r\n        let url = '';\r\n\r\n        // Code Flow\r\n        if (this.authConfiguration.response_type === 'code') {\r\n\r\n            // code_challenge with \"S256\"\r\n            const code_verifier = 'C' + Math.random() + '' + Date.now() + '' + Date.now() + Math.random();\r\n            const code_challenge = this.oidcSecurityValidation.generate_code_verifier(code_verifier);\r\n\r\n            this.oidcSecurityCommon.code_verifier = code_verifier;\r\n\r\n            if (this.authWellKnownEndpoints) {\r\n                url = this.createAuthorizeUrl(true, code_challenge,\r\n                    this.authConfiguration.silent_redirect_url,\r\n                    nonce,\r\n                    state,\r\n                    this.authWellKnownEndpoints.authorization_endpoint,\r\n                    'none'\r\n                );\r\n            } else {\r\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n            }\r\n        } else {\r\n            if (this.authWellKnownEndpoints) {\r\n                url = this.createAuthorizeUrl(false, '',\r\n                    this.authConfiguration.silent_redirect_url,\r\n                    nonce,\r\n                    state,\r\n                    this.authWellKnownEndpoints.authorization_endpoint,\r\n                    'none'\r\n                );\r\n            } else {\r\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n            }\r\n        }\r\n\r\n        this.oidcSecurityCommon.silentRenewRunning = 'running';\r\n        return this.oidcSecuritySilentRenew.startRenew(url);\r\n    }\r\n\r\n    handleError(error: any) {\r\n        this.loggerService.logError(error);\r\n        if (error.status === 403 || error.status === '403') {\r\n            if (this.authConfiguration.trigger_authorization_result_event) {\r\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.NotSet));\r\n            } else {\r\n                this.router.navigate([this.authConfiguration.forbidden_route]);\r\n            }\r\n        } else if (error.status === 401 || error.status === '401') {\r\n            const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n\r\n            this.resetAuthorizationData(!!silentRenew);\r\n\r\n            if (this.authConfiguration.trigger_authorization_result_event) {\r\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.NotSet));\r\n            } else {\r\n                this.router.navigate([this.authConfiguration.unauthorized_route]);\r\n            }\r\n        }\r\n    }\r\n\r\n    startCheckingSilentRenew(): void {\r\n        this.runTokenValidation();\r\n    }\r\n\r\n    stopCheckingSilentRenew(): void {\r\n        if (this._scheduledHeartBeat) {\r\n            clearTimeout(this._scheduledHeartBeat);\r\n            this._scheduledHeartBeat = null;\r\n            this.runTokenValidationRunning = false;\r\n        }\r\n    }\r\n\r\n    resetAuthorizationData(isRenewProcess: boolean): void {\r\n        if (!isRenewProcess) {\r\n            if (this.authConfiguration.auto_userinfo) {\r\n                // Clear user data. Fixes #97.\r\n                this.setUserData('');\r\n            }\r\n\r\n            this.oidcSecurityCommon.resetStorageData(isRenewProcess);\r\n            this.checkSessionChanged = false;\r\n            this.setIsAuthorized(false);\r\n        }\r\n    }\r\n\r\n    getEndSessionUrl(): string | undefined {\r\n        if (this.authWellKnownEndpoints) {\r\n            if (this.authWellKnownEndpoints.end_session_endpoint) {\r\n                const end_session_endpoint = this.authWellKnownEndpoints.end_session_endpoint;\r\n                const id_token_hint = this.oidcSecurityCommon.idToken;\r\n                return this.createEndSessionUrl(end_session_endpoint, id_token_hint);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getValidatedStateResult(result: any, jwtKeys: JwtKeys): ValidateStateResult {\r\n        if (result.error) {\r\n            return new ValidateStateResult('', '', false, {});\r\n        }\r\n\r\n        return this.stateValidationService.validateState(result, jwtKeys);\r\n    }\r\n\r\n    private setUserData(userData: any): void {\r\n        this.oidcSecurityCommon.userData = userData;\r\n        this._userData.next(userData);\r\n    }\r\n\r\n    private setIsAuthorized(isAuthorized: boolean): void {\r\n        this._isAuthorized.next(isAuthorized);\r\n    }\r\n\r\n    private setAuthorizationData(access_token: any, id_token: any) {\r\n        if (this.oidcSecurityCommon.accessToken !== '') {\r\n            this.oidcSecurityCommon.accessToken = '';\r\n        }\r\n\r\n        this.loggerService.logDebug(access_token);\r\n        this.loggerService.logDebug(id_token);\r\n        this.loggerService.logDebug('storing to storage, getting the roles');\r\n        this.oidcSecurityCommon.accessToken = access_token;\r\n        this.oidcSecurityCommon.idToken = id_token;\r\n        this.setIsAuthorized(true);\r\n        this.oidcSecurityCommon.isAuthorized = true;\r\n    }\r\n\r\n    private createAuthorizeUrl(isCodeFlow: boolean, code_challenge: string, redirect_url: string, nonce: string, state: string, authorization_endpoint: string, prompt?: string): string {\r\n        const urlParts = authorization_endpoint.split('?');\r\n        const authorizationUrl = urlParts[0];\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder(),\r\n        });\r\n        params = params.set('client_id', this.authConfiguration.client_id);\r\n        params = params.append('redirect_uri', redirect_url);\r\n        params = params.append('response_type', this.authConfiguration.response_type);\r\n        params = params.append('scope', this.authConfiguration.scope);\r\n        params = params.append('nonce', nonce);\r\n        params = params.append('state', state);\r\n\r\n        if (isCodeFlow) {\r\n\r\n            params = params.append('code_challenge', code_challenge);\r\n            params = params.append('code_challenge_method', 'S256');\r\n        }\r\n\r\n        if (prompt) {\r\n            params = params.append('prompt', prompt);\r\n        }\r\n\r\n        if (this.authConfiguration.hd_param) {\r\n            params = params.append('hd', this.authConfiguration.hd_param);\r\n        }\r\n\r\n        const customParams = Object.assign({}, this.oidcSecurityCommon.customRequestParams);\r\n\r\n        Object.keys(customParams).forEach(key => {\r\n            params = params.append(key, customParams[key].toString());\r\n        });\r\n\r\n        return `${authorizationUrl}?${params}`;\r\n    }\r\n\r\n    private createEndSessionUrl(end_session_endpoint: string, id_token_hint: string) {\r\n        const urlParts = end_session_endpoint.split('?');\r\n\r\n        const authorizationEndsessionUrl = urlParts[0];\r\n\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder(),\r\n        });\r\n        params = params.set('id_token_hint', id_token_hint);\r\n        params = params.append('post_logout_redirect_uri', this.authConfiguration.post_logout_redirect_uri);\r\n\r\n        return `${authorizationEndsessionUrl}?${params}`;\r\n    }\r\n\r\n    private getSigningKeys(): Observable<JwtKeys> {\r\n        if (this.authWellKnownEndpoints) {\r\n            this.loggerService.logDebug('jwks_uri: ' + this.authWellKnownEndpoints.jwks_uri);\r\n\r\n            return this.oidcDataService.get<JwtKeys>(this.authWellKnownEndpoints.jwks_uri).pipe(catchError(this.handleErrorGetSigningKeys));\r\n        } else {\r\n            this.loggerService.logWarning('getSigningKeys: authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        return this.oidcDataService.get<JwtKeys>('undefined').pipe(catchError(this.handleErrorGetSigningKeys));\r\n    }\r\n\r\n    private handleErrorGetSigningKeys(error: Response | any) {\r\n        let errMsg: string;\r\n        if (error instanceof Response) {\r\n            const body = error.json() || {};\r\n            const err = JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        console.error(errMsg);\r\n        return observableThrowError(errMsg);\r\n    }\r\n\r\n    private runTokenValidation() {\r\n        if (this.runTokenValidationRunning || !this.authConfiguration.silent_renew) {\r\n            return;\r\n        }\r\n        this.runTokenValidationRunning = true;\r\n        this.loggerService.logDebug('runTokenValidation silent-renew running');\r\n\r\n        /**\r\n            First time: delay 10 seconds to call silentRenewHeartBeatCheck\r\n            Afterwards: Run this check in a 5 second interval only AFTER the previous operation ends.\r\n         */\r\n        const silentRenewHeartBeatCheck = () => {\r\n            this.loggerService.logDebug(\r\n                'silentRenewHeartBeatCheck\\r\\n' +\r\n                    `\\tsilentRenewRunning: ${this.oidcSecurityCommon.silentRenewRunning === 'running'}\\r\\n` +\r\n                    `\\tidToken: ${!!this.getIdToken()}\\r\\n` +\r\n                    `\\t_userData.value: ${!!this._userData.value}`\r\n            );\r\n            if (this._userData.value && this.oidcSecurityCommon.silentRenewRunning !== 'running' && this.getIdToken()) {\r\n                if (\r\n                    this.oidcSecurityValidation.isTokenExpired(this.oidcSecurityCommon.idToken, this.authConfiguration.silent_renew_offset_in_seconds)\r\n                ) {\r\n                    this.loggerService.logDebug('IsAuthorized: id_token isTokenExpired, start silent renew if active');\r\n\r\n                    if (this.authConfiguration.silent_renew) {\r\n                        this.refreshSession().subscribe(\r\n                            () => {\r\n                                this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n                            },\r\n                            (err: any) => {\r\n                                this.loggerService.logError('Error: ' + err);\r\n                                this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n                            }\r\n                        );\r\n                        /* In this situation, we schedule a heatbeat check only when silentRenew is finished.\r\n                        We don't want to schedule another check so we have to return here */\r\n                        return;\r\n                    } else {\r\n                        this.resetAuthorizationData(false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /* Delay 3 seconds and do the next check */\r\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n        };\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n            /* Initial heartbeat check */\r\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 10000);\r\n        });\r\n    }\r\n\r\n    private silentRenewEventHandler(e: CustomEvent) {\r\n        this.loggerService.logDebug('silentRenewEventHandler');\r\n\r\n        if (this.authConfiguration.response_type === 'code') {\r\n\r\n            const urlParts = e.detail.toString().split('?');\r\n            const params = new HttpParams({\r\n                fromString: urlParts[1]\r\n            });\r\n            const code = params.get('code');\r\n            const state = params.get('state');\r\n            const session_state = params.get('session_state');\r\n            const error = params.get('error');\r\n            if (code && state) {\r\n                this.requestTokensWithCodeProcedure(code, state, session_state);\r\n            }\r\n            if (error) {\r\n                this.loggerService.logDebug(e.detail.toString());\r\n            }\r\n\r\n        } else {\r\n            // ImplicitFlow\r\n            this.authorizedImplicitFlowCallback(e.detail);\r\n        }\r\n    }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { OidcDataService } from '../data-services/oidc-data.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\nimport { IFrameService } from '../services/existing-iframe.service';\r\nimport { EqualityHelperService } from '../services/oidc-equality-helper.service';\r\nimport { StateValidationService } from '../services/oidc-security-state-validation.service';\r\nimport { TokenHelperService } from '../services/oidc-token-helper.service';\r\nimport { LoggerService } from '../services/oidc.logger.service';\r\nimport { OidcSecurityCheckSession } from '../services/oidc.security.check-session';\r\nimport { OidcSecurityCommon } from '../services/oidc.security.common';\r\nimport { OidcConfigService } from '../services/oidc.security.config.service';\r\nimport { OidcSecurityService } from '../services/oidc.security.service';\r\nimport { OidcSecuritySilentRenew } from '../services/oidc.security.silent-renew';\r\nimport { BrowserStorage, OidcSecurityStorage } from '../services/oidc.security.storage';\r\nimport { OidcSecurityUserService } from '../services/oidc.security.user-service';\r\nimport { OidcSecurityValidation } from '../services/oidc.security.validation';\r\nimport { AuthConfiguration } from './auth.configuration';\r\n\r\n@NgModule()\r\nexport class AuthModule {\r\n    static forRoot(token: Token = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: AuthModule,\r\n            providers: [\r\n                OidcConfigService,\r\n                OidcSecurityService,\r\n                OidcSecurityValidation,\r\n                OidcSecurityCheckSession,\r\n                OidcSecuritySilentRenew,\r\n                OidcSecurityUserService,\r\n                OidcSecurityCommon,\r\n                AuthConfiguration,\r\n                TokenHelperService,\r\n                LoggerService,\r\n                IFrameService,\r\n                EqualityHelperService,\r\n                AuthWellKnownEndpoints,\r\n                OidcDataService,\r\n                StateValidationService,\r\n                {\r\n                    provide: OidcSecurityStorage,\r\n                    useClass: token.storage || BrowserStorage,\r\n                },\r\n            ],\r\n        };\r\n    }\r\n}\r\n\r\nexport interface Type<T> extends Function {\r\n    new (...args: any[]): T;\r\n}\r\n\r\nexport interface Token {\r\n    storage?: Type<any>;\r\n}\r\n"],"names":["observableThrowError"],"mappings":"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"}
